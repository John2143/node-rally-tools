{"version":3,"file":"bundle.js","sources":["src/config.js","src/rally-tools.js","src/preset.js","src/rule.js","src/index.js","src/cli.js"],"sourcesContent":["import {homedir} from \"os\";\nimport {readFileSync} from \"fs\";\n\nexport let configFile = homedir() + \"/.rallyconfig\";\n\nlet configObject = {api: {}};\ntry{\n    let json = readFileSync(configFile);\n    configObject = JSON.parse(json);\n}catch(e){\n    if(e.code == \"ENOENT\"){\n        //ok\n    }else{\n        throw e;\n    }\n}\n\nexport {configObject};\n","import rp from \"request-promise\";\nimport chalk from \"chalk\";\nimport {configObject} from \"./config.js\";\n\nglobal.chalk = chalk;\nglobal.log = text => console.log(text);\nglobal.write = text => process.stdout.write(text);\nglobal.errorLog = text => log(chalk.red(text));\n\nexport class lib{\n    static async makeAPIRequest({env, path, path_full, payload, body, json = true, method = \"GET\", qs, headers = {}, fullResponse = false}){\n        //Keys are defined in enviornment variables\n        let config = configObject.api[env];\n        if(!config) {\n            return false;\n        };\n\n        let rally_api_key = config.key;\n        let rally_api = config.url;\n\n\n        path = path_full || rally_api + path;\n        body = body || payload && JSON.stringify(payload);\n\n        if(global.logAPI){\n            log(chalk`${method} @ ${path}`);\n            if(qs){\n                log(qs)\n            }\n        }\n        if(payload){\n            headers[\"Content-Type\"] = \"application/vnd.api+json\";\n        }\n\n        let requestOptions = {\n            method, body, qs, uri: path,\n            auth: {bearer: rally_api_key},\n            headers: {\n                Accept: \"application/vnd.api+json\",\n                ...headers,\n            },\n            simple: false, resolveWithFullResponse: true,\n        };\n        let response = await rp(requestOptions);\n\n        if(!fullResponse && ![200, 201, 204].includes(response.statusCode)){\n            throw new APIError(response, requestOptions);\n        }\n        if(fullResponse){\n            return response;\n        }else if(json){\n            return JSON.parse(response.body);\n        }else{\n            return response.body;\n        }\n    }\n    //Index a json endpoint that returns a {links} field.\n    static async indexPath(env, path){\n        let all = [];\n\n        let json = await this.makeAPIRequest({env, path});\n\n        let [numPages, pageSize] = this.numPages(json.links.last);\n        //log(`num pages: ${numPages} * ${pageSize}`);\n\n        all = [...json.data];\n        while(json.links.next){\n            json = await this.makeAPIRequest({env, path_full: json.links.next});\n            all = [...all, ...json.data];\n        }\n\n        return all;\n    }\n\n    //Returns number of pages and pagination size\n    static numPages(str){\n        return /page=(\\d+)p(\\d+)/.exec(str).slice(1);\n    }\n\n    //Index a json endpoint that returns a {links} field.\n    //\n    //This function is faster than indexPath because it can guess the pages it\n    //needs to retreive so that it can request all assets at once.\n    //\n    //This function assumes that the content from the inital request is the\n    //first page, so starting on another page may cause issues. Consider\n    //indexPath for that.\n    static async indexPathFast(env, path){\n        let all = [];\n\n        let json = await this.makeAPIRequest({env, path});\n        let baselink = json.links.first;\n        const linkToPage = page => baselink.replace(\"page=1p\", `page=${page}p`);\n\n        let [numPages, pageSize] = this.numPages(json.links.last);\n        //log(`num pages: ${numPages} * ${pageSize}`);\n\n        //Construct an array of all the requests that are done simultanously.\n        //Assume that the content from the inital request is the first page.\n        let promises = [Promise.resolve(json),];\n        for(let i = 2; i <= numPages; i++){\n            let req = this.makeAPIRequest({env, path_full: linkToPage(i)});\n            promises.push(req);\n        }\n\n        for(let promise of promises){\n            all = [...all, ...(await promise).data];\n        }\n\n        return all;\n    }\n};\n\nexport class AbortError extends Error{\n    constructor(message){\n        super(message);\n        Error.captureStackTrace(this, this.constructor);\n        this.name = \"AbortError\";\n    }\n}\n\nexport class APIError extends Error{\n    constructor(response, opts){\n        super(chalk`\n{reset Request returned} {yellow ${response.statusCode}}\n{green ${JSON.stringify(opts)}}\n{reset ${response.body}}\n        `);\n        Error.captureStackTrace(this, this.constructor);\n        this.name = \"ApiError\";\n    }\n}\n","import fs from \"fs\";\nimport {lib, AbortError} from  \"./rally-tools.js\";\nimport {basename} from \"path\";\n\nlet envs = {};\nexport default class Preset{\n    constructor({path, remote, data}){\n        this.remote = remote\n        if(!this.remote){\n            this.path = path;\n            try{\n                this.code = this.getLocalCode();\n            }catch(e){\n                log(chalk`{red Node Error} e.message`);\n                throw new AbortError(\"Could not load code of local file\");\n            }\n            this.name = this.parseFilenameForName() || this.parseCodeForName();\n        }else{\n            this.name = data.attributes.name;\n            this.id = data.id;\n            this.rawData = data;\n        }\n    }\n    chalkPrint(){\n        let id = String(this.remote && this.remote + \"-\" + this.id || \"Local\").padStart(8);\n        return chalk`{green ${id}}: {blue ${this.name}}`;\n    }\n    parseFilenameForName(){\n        if(this.path.endsWith(\".jinja\") || this.path.endsWith(\".json\")){\n            return basename(this.path)\n                .replace(\"_\", \" \")\n                .replace(\"-\", \" \");\n        }\n    }\n    parseCodeForName(){\n        const name_regex = /name:\\s([\\w\\d. \\/]+)[\\r\\s\\n]*?/;\n        const match = name_regex.exec(this.code);\n        if(match) return match[1];\n    }\n    findStringsInCode(strings){\n        if(!this.code) return [];\n\n        return strings.filter(str => {\n            let regex = new Regexp(str);\n            return !!this.code.match(regex);\n        });\n    }\n    getPath(){\n        return `${process.env.rally_repo_path}/silo-presets/${this.name}.${this.ext}`;\n    }\n    getMetadataPath(){\n        return `${process.env.rally_repo_path}/silo-metadata/${this.name}.json`;\n    }\n    codeBinary(){\n        if(this.code.startsWith(\"=BASE64=\")){\n            return bota(this.code.substring(8));\n        }else{\n            return this.code;\n        }\n    }\n    async uploadPresetData(env, id){\n        let res = await lib.makeAPIRequest({\n            env, path: `/presets/${id}/providerData`,\n            body: this.code, method: \"PUT\", fullResponse: true\n        });\n        write(chalk`response {yellow ${res.statusCode}}`);\n    }\n    async uploadCodeToEnv(env, createFunction){\n        write(chalk`Uploading {green ${this.name}} to {green ${env}}: `);\n\n        //First query the api to see if this already exists.\n        let res = await lib.makeAPIRequest({\n            env, path: `/presets`,\n            qs: {filter: `name=${this.name}`},\n        });\n        let remote = res.data[0];\n\n        if(remote){\n            //If it exists we can replace it\n            write(\"replace, \");\n            await this.uploadPresetData(env, remote.id);\n        }else{\n            //If it needs to be created then we need to ask the user for metadata\n            write(\"create, \");\n            let metadata = await createFunction(this);\n            write(\"Posting to create preset... \");\n            let res = await lib.makeAPIRequest({\n                env, path: `/presets`, method: \"POST\",\n                payload: {data: metadata},\n            });\n            let id = res.data.id;\n            write(chalk`Created id {green ${id}}... Uploading Code... `);\n            await this.uploadPresetData(env, id);\n        }\n        log();\n    }\n\n    constructMetadata(providerID){\n        return {\n            attributes: {\n                name: this.name,\n                //providerSettings: {\n                //},\n            },\n            relationships: {\n                providerType: {\n                    data: {\n                        id: providerID,\n                        type: \"providerTypes\",\n                    },\n                }\n            },\n            type: \"presets\"\n        };\n    }\n\n    getMetadata(){}\n    getLocalCode(){\n        return fs.readFileSync(this.path, \"utf-8\");\n    }\n\n    static envs(env){\n        return envs[env] = envs[env] || Preset.cache_envs(env);\n    }\n    static cache_env(env){\n\n    }\n}\n","export default class Rule{\n    constructor(data, remote){\n        this.rawData = data;\n        this.remote = remote;\n    }\n    chalkPrint(){\n        let D = this.rawData;\n        let id = String(this.remote + \"-\" + D.id).padStart(8);\n        return chalk`{green ${id}}: {blue ${D.attributes.name}}`;\n    }\n}\n","import {lib} from \"./rally-tools.js\";\n\nexport {default as Preset} from \"./preset.js\";\nexport {default as Rule} from \"./rule.js\";\nexport * from \"./rally-tools.js\";\n\nexport const rallyFunctions = {\n    async bestPagintation(){\n        global.silentAPI = true;\n        for(let i = 10; i <= 30; i+=5){\n            console.time(\"test with \" + i);\n            let dl = await lib.indexPathFast(\"DEV\", `/workflowRules?page=1p${i}`);\n            console.timeEnd(\"test with \" + i);\n        }\n    },\n    async uploadPresets(env, presets, createFunc = ()=>false){\n        for(let preset of presets){\n            await preset.uploadCodeToEnv(env, createFunc);\n        }\n    },\n    async getProviders(env){\n        let providers = await lib.indexPath(env, \"/providerTypes?page=1p50\");\n        providers = providers.sort((a, b) => {\n            return a.attributes.category.localeCompare(b.attributes.category) ||\n                   a.attributes.name    .localeCompare(b.attributes.name);\n        });\n        return providers;\n    },\n    async getEditorConfig(env, provider){\n        let config = await lib.makeAPIRequest({env, path_full: provider.links.editorConfig});\n        let helpText = config.helpText;\n        config.helpText = () => helpText;\n        return config\n    },\n    async getRules(env){\n        let rules = await lib.indexPathFast(env, \"/workflowRules?page=1p20\");\n        return rules;\n    },\n    async getPresets(env){\n        let rules = await lib.indexPathFast(env, \"/presets?page=1p20\");\n        return rules;\n    },\n    async testAccess(env){\n        let result = await lib.makeAPIRequest({env, path: \"/providers?page=1p1\", fullResponse: true});\n        if(!result) return 401;\n        return result.statusCode;\n    }\n}\n","require(\"source-map-support\").install();\n\nimport argparse from \"minimist\";\nimport {rallyFunctions as funcs, Preset, Rule, AbortError} from \"./index.js\";\nimport inquirer from \"inquirer\";\n\nimport {version as packageVersion} from \"../package.json\";\nimport {configFile, configObject} from \"./config.js\";\nimport {writeFileSync, chmodSync} from \"fs\";\n\nlet argv = argparse(process.argv.slice(2), {\n    string: [\"file\", \"env\"],\n    alias: {\n        f: \"file\", e: \"env\",\n    }\n});\n\nfunction prettyPrintProvider(pro){\n    let id = String(pro.id).padStart(4);\n    return chalk`{green ${id}}: {blue ${pro.attributes.category}} - {green ${pro.attributes.name}}`;\n}\n\nlet help = {\n};\n\nlet helpEntry = name => help[name] ? help[name] : (help[name] = {name});\n\nfunction helpText(text){\n    return function(func, name){\n        helpEntry(name).text = text;\n        return func;\n    }\n}\nfunction arg(long, short, desc){\n    return function(func, name){\n        let args = helpEntry(name).args = helpEntry(name).args || [];\n        args.unshift({long, short, desc});\n        return func;\n    }\n}\nfunction param(param, desc){\n    return function(func, name){\n        let params = helpEntry(name).params = helpEntry(name).params || [];\n        params.unshift({param, desc});\n        return func;\n    }\n}\nfunction usage(usage){\n    return function(func, name){\n        usage = usage.replace(/[\\[<](\\w+)[\\]>]/g, chalk`[{blue $1}]`);\n        helpEntry(name).usage = usage;\n        return func;\n    }\n}\n\nfunction printHelp(help, short){\n    let helpText = chalk`\n{white ${help.name}}: ${help.text}\n    Usage: ${help.usage || \"<unknown>\"}\n`\n    //Trim newlines\n    helpText = helpText.substring(1, helpText.length-1);\n\n    if(!short){\n        for(let param of help.params || []){\n            helpText += chalk`\\n    {blue ${param.param}}: ${param.desc}`\n        }\n        for(let arg of help.args || []){\n            helpText += chalk`\\n    {blue ${arg.short}}, {blue ${arg.long}}: ${arg.desc}`\n        }\n    }\n\n    return helpText;\n}\n\nlet cli = {\n    @helpText(`Display the help menu`)\n    @usage(`rally help [subhelp]`)\n    @param(\"subhelp\", \"The name of the command to see help for\")\n    async help(){\n        let arg = argv._[1];\n        if(arg){\n            log(printHelp(help[arg]));\n        }else{\n            for(let arg in help){\n                log(printHelp(help[arg], true));\n            }\n        }\n    },\n\n    @helpText(`Print input args, for debugging`)\n    async printArgs(args){\n        log(args);\n    },\n\n    @helpText(`Preset related actions`)\n    @usage(`rally preset [action] --env [enviornment] --file [file1] --file [file2] ...`)\n    @param(\"action\", \"The action to perform. Can be upload or list\")\n    @arg(\"-e\", \"--env\", \"The enviornment you wish to perform the action on\")\n    @arg(\"-f\", \"--file\", \"A file to act on\")\n    async preset(args){\n        let env = args.env;\n        let arg = argv._[1];\n        if(arg === \"upload\"){\n            let files = args.file;\n            if(!files){\n                throw new AbortError(\"No files provided to upload (use --file argument)\");\n            }\n            if(typeof files === \"string\") files = [files];\n            log(chalk`Uploading {green ${files.length}} preset(s) to {green ${env}}.`);\n\n            let presets = files.map(path => new Preset({path, remote: false}));\n            await funcs.uploadPresets(args.env, presets, async preset => {\n                log(\"asking... \");\n                let provider = await this[\"select-provider\"](args);\n                return preset.constructMetadata(provider.id);\n            });\n        }else if(arg === \"list\"){\n            log(\"Loading...\");\n            let presets = await funcs.getPresets(env);\n            log(chalk`{yellow ${presets.length}} presets on {green ${env}}.`);\n            for(let data of presets) log(new Preset({data, remote: env}).chalkPrint());\n        }else{\n            log(chalk`Unknown action {red ${arg}} try '{white rally help preset}'`);\n        }\n        //log(presets);\n    },\n\n    @helpText(`Rule related actions`)\n    @usage(`rally rule [action] --env [enviornment]`)\n    @param(\"action\", \"The action to perform. Only list is supported right now\")\n    @arg(\"-e\", \"--env\", \"The enviornment you wish to perform the action on\")\n    async rule(args){\n        let env = args.env;\n        let arg = argv._[1];\n\n        if(arg === \"list\"){\n            log(\"Loading...\");\n            let rules = await funcs.getRules(env);\n            log(chalk`{yellow ${rules.length}} rules on {green ${env}}.`);\n            for(let data of rules) log(new Rule(data, env).chalkPrint());\n        }else{\n            log(chalk`Unknown action {red ${arg}} try '{white rally help rule}'`);\n        }\n    },\n\n    @helpText(`List all available providers, or find one by name/id`)\n    @usage(`rally providers [identifier] --env [env]`)\n    @param(\"identifier\", \"Either the name or id of the provider\")\n    @arg(\"-e\", \"--env\", \"The enviornment you wish to perform the action on\")\n    async providers(args){\n        let env = args.env;\n        let ident = argv._[1];\n\n        let providers = await funcs.getProviders(env);\n\n        if(ident){\n            let pro = providers.find(x => x.id == ident || x.attributes.name.includes(ident));\n            if(!pro){\n                log(chalk`Couldn't find provider by {green ${ident}}`);\n            }else{\n                log(prettyPrintProvider(pro));\n                log(await funcs.getEditorConfig(env, pro));\n            }\n        }else{\n            for(let pro of providers) log(prettyPrintProvider(pro));\n        }\n    },\n    @helpText(`First time config for rally tools`)\n    @usage(\"rally config\")\n    async config(args){\n        let q = await inquirer.prompt([{\n            type: \"confirm\",\n            name: \"ok\",\n            message: `Would you like to create a new config file in ${configFile}`,\n        }]);\n        if(!q.ok) return;\n\n        q = await inquirer.prompt([{\n            type: \"checkbox\",\n            name: \"envs\",\n            message: `What enviornments would you like to configure?`,\n            choices: [\"DEV\", \"UAT\", \"PROD\"].map(name => ({name, checked:true})),\n        }]);\n\n        const defaults = {\n            DEV:  \"https://discovery-dev.sdvi.com/api/v2\",\n            UAT:  \"https://discovery-uat.sdvi.com/api/v2\",\n            PROD: \"https://discovery.sdvi.com/api/v2\",\n        };\n        let questions = q.envs.map(env => {\n            return [{\n                type: \"input\",\n                name: `${env}.url`,\n                message: `What is the url endpoint for ${env}`,\n                default: defaults[env],\n            }, {\n                type: \"input\",\n                name: `${env}.key`,\n                message: `What is your api key for ${env}`,\n                default: process.env[`rally_api_key_${env}`],\n            }];\n        });\n\n        //flatten and ask\n        questions = [].concat(...questions);\n        q = await inquirer.prompt(questions);\n\n        let newConfig = JSON.stringify({api: q}, null, 4);\n        log(newConfig);\n\n        q = await inquirer.prompt([{\n            type: \"confirm\",\n            name: \"ok\",\n            message: `Is this ok?`,\n        }]);\n\n        if(!q.ok) return;\n\n        writeFileSync(configFile, newConfig);\n\n        log(chalk`Created file {green ${configFile}}.`);\n\n        q = await inquirer.prompt([{\n            type: \"confirm\",\n            name: \"ok\",\n            message: `Chmod to 600?`,\n        }]);\n\n        if(!q.ok) return;\n\n        chmodSync(configFile, \"600\");\n\n        log(chalk`Changed file to user r/w only`);\n    },\n    async [\"select-provider\"](args){\n        let env = args.env;\n\n        let providers = await funcs.getProviders(env);\n        let defaultProvider =  providers.find(x => x.attributes.name === \"SdviEvaluate\");\n        if(args.defaultSelect){\n            return defaultProvider;\n        }else{\n            let q = await inquirer.prompt([{\n                type: \"list\",\n                name: \"provider\",\n                default: defaultProvider,\n                choices: providers.map(x => ({\n                    name: prettyPrintProvider(x),\n                    value: x,\n                })),\n            },]);\n            return q.provider;\n        }\n    },\n};\n\nasync function printBareHelp(){\n    write(chalk`\nRally Tools {yellow v${packageVersion}} CLI\nby John Schmidt <John_Schmidt@discovery.com>\n\nAPI Status:\n`);\n    for(let env of [\"UAT\", \"DEV\", \"PROD\"]){\n        let result = await funcs.testAccess(env);\n\n        let resultStr = \"{yellow ${result} <unknown>\";\n             if(result === 200) resultStr = chalk`{green 200 OK}`;\n        else if(result === 401) resultStr = chalk`{red 401 No Access}`;\n        else if(result >= 500)  resultStr = chalk`{yellow ${result} API Down?}`;\n\n        log(chalk`   ${env}: ${resultStr}`);\n    }\n}\n\nasync function $main(){\n    let func = argv._[0];\n    if(cli[func]){\n        try{\n            let ret = await cli[func](argv);\n            if(ret){\n                write(chalk.white(\"CLI returned: \"));\n                log(ret);\n            }\n        }catch(e){\n            if(e instanceof AbortError){\n                log(chalk`{red CLI Aborted}: ${e.message}`);\n            }else{\n                throw e;\n            }\n        }\n    }else{\n        await printBareHelp();\n    }\n}\n\nasync function main(...args){\n    try{\n        await $main(...args);\n    }catch(e){\n        errorLog(e.stack);\n    }\n}\n\nmain();\n"],"names":["configFile","homedir","configObject","api","json","readFileSync","JSON","parse","e","code","global","chalk","log","text","console","write","process","stdout","errorLog","red","lib","makeAPIRequest","env","path","path_full","payload","body","method","qs","headers","fullResponse","config","rally_api_key","key","rally_api","url","stringify","logAPI","requestOptions","uri","bearer","resolveWithFullResponse","response","rp","includes","statusCode","APIError","indexPath","all","numPages","pageSize","links","last","data","next","str","exec","slice","indexPathFast","baselink","first","linkToPage","page","replace","promises","Promise","resolve","i","req","push","promise","AbortError","Error","message","captureStackTrace","constructor","name","opts","envs","Preset","remote","getLocalCode","parseFilenameForName","parseCodeForName","attributes","id","rawData","String","padStart","endsWith","basename","name_regex","match","strings","filter","regex","Regexp","rally_repo_path","ext","startsWith","bota","substring","uploadPresetData","res","uploadCodeToEnv","createFunction","metadata","providerID","fs","cache_envs","cache_env","Rule","D","rallyFunctions","bestPagintation","silentAPI","time","dl","timeEnd","uploadPresets","presets","createFunc","preset","getProviders","providers","sort","a","b","category","localeCompare","getEditorConfig","provider","editorConfig","helpText","getRules","rules","getPresets","testAccess","result","require","install","argv","argparse","prettyPrintProvider","pro","help","helpEntry","func","arg","long","short","desc","args","unshift","param","params","usage","printHelp","length","cli","_","printArgs","files","file","map","funcs","constructMetadata","chalkPrint","rule","ident","find","x","q","inquirer","prompt","ok","checked","defaults","questions","concat","newConfig","defaultProvider","defaultSelect","printBareHelp","packageVersion","resultStr","$main","ret","white","main","stack"],"mappings":"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"}